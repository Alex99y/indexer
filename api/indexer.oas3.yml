{
   "info" : {
      "version" : "1.0",
      "title" : "Indexer 2 0",
      "contact" : {
         "name" : "Algorand",
         "url" : "https://www.algorand.com/get-in-touch/contact"
      },
      "description" : "Algorand ledger analytics API."
   },
   "components" : {
      "schemas" : {
         "AssetParams" : {
            "required" : [
               "creator",
               "decimals",
               "total"
            ],
            "properties" : {
               "name" : {
                  "type" : "string",
                  "description" : "\\[an\\] Name of this asset, as supplied by the creator."
               },
               "unit-name" : {
                  "description" : "\\[un\\] Name of a unit of this asset, as supplied by the creator.",
                  "type" : "string"
               },
               "metadata-hash" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "format" : "byte",
                  "description" : "\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.",
                  "type" : "string"
               },
               "default-frozen" : {
                  "description" : "\\[df\\] Whether holdings of this asset are frozen by default.",
                  "type" : "boolean"
               },
               "manager" : {
                  "description" : "\\[m\\] Address of account used to manage the keys of this asset and to destroy it.",
                  "type" : "string"
               },
               "freeze" : {
                  "description" : "\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.",
                  "type" : "string"
               },
               "clawback" : {
                  "description" : "\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.",
                  "type" : "string"
               },
               "creator" : {
                  "type" : "string",
                  "description" : "The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case."
               },
               "url" : {
                  "description" : "\\[au\\] URL where more information about the asset can be retrieved.",
                  "type" : "string"
               },
               "reserve" : {
                  "type" : "string",
                  "description" : "\\[r\\] Address of account holding reserve (non-minted) units of this asset."
               },
               "total" : {
                  "x-algorand-format" : "uint64",
                  "description" : "\\[t\\] The total number of units of this asset.",
                  "type" : "integer"
               },
               "decimals" : {
                  "type" : "integer",
                  "description" : "\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).",
                  "maximum" : 19,
                  "minimum" : 0
               }
            },
            "type" : "object",
            "description" : "AssetParams specifies the parameters for an asset.\n\n\\[apar\\] when part of an AssetConfig transaction.\n\nDefinition:\ndata/transactions/asset.go : AssetParams"
         },
         "TransactionPayment" : {
            "required" : [
               "amount",
               "receiver"
            ],
            "properties" : {
               "close-remainder-to" : {
                  "description" : "\\[close\\] when set, indicates that the sending account should be closed and all remaining funds be transferred to this address.",
                  "type" : "string"
               },
               "amount" : {
                  "type" : "integer",
                  "description" : "\\[amt\\] number of MicroAlgos intended to be transferred."
               },
               "close-amount" : {
                  "type" : "integer",
                  "description" : "Number of MicroAlgos that were sent to the close-remainder-to address when closing the sender account."
               },
               "receiver" : {
                  "description" : "\\[rcv\\] receiver's address.",
                  "type" : "string"
               }
            },
            "type" : "object",
            "description" : "Fields for a payment transaction.\n\nDefinition:\ndata/transactions/payment.go : PaymentTxnFields"
         },
         "TransactionSignatureMultisigSubsignature" : {
            "type" : "object",
            "properties" : {
               "signature" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type" : "string",
                  "description" : "\\[s\\]",
                  "format" : "byte"
               },
               "public-key" : {
                  "format" : "byte",
                  "description" : "\\[pk\\]",
                  "type" : "string",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
               }
            }
         },
         "BlockUpgradeState" : {
            "description" : "Fields relating to a protocol upgrade.",
            "type" : "object",
            "required" : [
               "current-protocol"
            ],
            "properties" : {
               "next-protocol" : {
                  "description" : "\\[nextproto\\] The next proposed protocol version.",
                  "type" : "string"
               },
               "current-protocol" : {
                  "type" : "string",
                  "description" : "\\[proto\\] The current protocol version."
               },
               "next-protocol-approvals" : {
                  "type" : "integer",
                  "description" : "\\[nextyes\\] Number of blocks which approved the protocol upgrade."
               },
               "next-protocol-switch-on" : {
                  "description" : "\\[nextswitch\\] Round on which the protocol upgrade will take effect.",
                  "type" : "integer"
               },
               "next-protocol-vote-before" : {
                  "description" : "\\[nextbefore\\] Deadline round for this protocol upgrade (No votes will be consider after this round).",
                  "type" : "integer"
               }
            }
         },
         "BlockUpgradeVote" : {
            "description" : "Fields relating to voting for a protocol upgrade.",
            "type" : "object",
            "properties" : {
               "upgrade-delay" : {
                  "type" : "integer",
                  "description" : "\\[upgradedelay\\] Indicates the time between acceptance and execution."
               },
               "upgrade-approve" : {
                  "description" : "\\[upgradeyes\\] Indicates a yes vote for the current proposal.",
                  "type" : "boolean"
               },
               "upgrade-propose" : {
                  "type" : "string",
                  "description" : "\\[upgradeprop\\] Indicates a proposed upgrade."
               }
            }
         },
         "TransactionAssetTransfer" : {
            "type" : "object",
            "description" : "Fields for an asset transfer transaction.\n\nDefinition:\ndata/transactions/asset.go : AssetTransferTxnFields",
            "required" : [
               "amount",
               "asset-id",
               "receiver"
            ],
            "properties" : {
               "receiver" : {
                  "description" : "\\[arcv\\] Recipient address of the transfer.",
                  "type" : "string"
               },
               "asset-id" : {
                  "description" : "\\[xaid\\] ID of the asset being transferred.",
                  "type" : "integer"
               },
               "close-amount" : {
                  "x-algorand-format" : "uint64",
                  "description" : "Number of assets transfered to the close-to account as part of the transaction.",
                  "type" : "integer"
               },
               "close-to" : {
                  "type" : "string",
                  "description" : "\\[aclose\\] Indicates that the asset should be removed from the account's Assets map, and specifies where the remaining asset holdings should be transferred.  It's always valid to transfer remaining asset holdings to the creator account."
               },
               "sender" : {
                  "type" : "string",
                  "description" : "\\[asnd\\] The effective sender during a clawback transactions. If this is not a zero value, the real transaction sender must be the Clawback address from the AssetParams."
               },
               "amount" : {
                  "type" : "integer",
                  "description" : "\\[aamt\\] Amount of asset to transfer. A zero amount transferred to self allocates that asset in the account's Assets map.",
                  "x-algorand-format" : "uint64"
               }
            }
         },
         "BlockRewards" : {
            "required" : [
               "fee-sink",
               "rewards-calculation-round",
               "rewards-level",
               "rewards-pool",
               "rewards-rate",
               "rewards-residue"
            ],
            "properties" : {
               "rewards-calculation-round" : {
                  "description" : "\\[rwcalr\\] number of leftover MicroAlgos after the distribution of rewards-rate MicroAlgos for every reward unit in the next round.",
                  "type" : "integer"
               },
               "rewards-residue" : {
                  "type" : "integer",
                  "description" : "\\[frac\\] Number of leftover MicroAlgos after the distribution of RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round."
               },
               "rewards-rate" : {
                  "description" : "\\[rate\\] Number of new MicroAlgos added to the participation stake from rewards at the next round.",
                  "type" : "integer"
               },
               "rewards-pool" : {
                  "description" : "\\[rwd\\] accepts periodic injections from the fee-sink and continually redistributes them as rewards.",
                  "type" : "string"
               },
               "fee-sink" : {
                  "description" : "\\[fees\\] accepts transaction fees, it can only spend to the incentive pool.",
                  "type" : "string"
               },
               "rewards-level" : {
                  "type" : "integer",
                  "description" : "\\[earn\\] How many rewards, in MicroAlgos, have been distributed to each RewardUnit of MicroAlgos since genesis."
               }
            },
            "type" : "object",
            "description" : "Fields relating to rewards,"
         },
         "AccountParticipation" : {
            "required" : [
               "selection-participation-key",
               "vote-first-valid",
               "vote-key-dilution",
               "vote-last-valid",
               "vote-participation-key"
            ],
            "properties" : {
               "vote-first-valid" : {
                  "description" : "\\[voteFst\\] First round for which this participation is valid.",
                  "type" : "integer"
               },
               "vote-last-valid" : {
                  "description" : "\\[voteLst\\] Last round for which this participation is valid.",
                  "type" : "integer"
               },
               "vote-key-dilution" : {
                  "description" : "\\[voteKD\\] Number of subkeys in each batch of participation keys.",
                  "type" : "integer"
               },
               "vote-participation-key" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "description" : "\\[vote\\] root participation public key (if any) currently registered for this round.",
                  "type" : "string",
                  "format" : "byte"
               },
               "selection-participation-key" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "format" : "byte",
                  "description" : "\\[sel\\] Selection public key (if any) currently registered for this round.",
                  "type" : "string"
               }
            },
            "description" : "AccountParticipation describes the parameters used by this account in consensus protocol.",
            "type" : "object"
         },
         "TransactionAssetFreeze" : {
            "required" : [
               "address",
               "asset-id",
               "new-freeze-status"
            ],
            "properties" : {
               "address" : {
                  "type" : "string",
                  "description" : "\\[fadd\\] Address of the account whose asset is being frozen or thawed."
               },
               "new-freeze-status" : {
                  "description" : "\\[afrz\\] The new freeze status.",
                  "type" : "boolean"
               },
               "asset-id" : {
                  "description" : "\\[faid\\] ID of the asset being frozen or thawed.",
                  "type" : "integer"
               }
            },
            "description" : "Fields for an asset freeze transaction.\n\nDefinition:\ndata/transactions/asset.go : AssetFreezeTxnFields",
            "type" : "object"
         },
         "TransactionSignature" : {
            "type" : "object",
            "description" : "Validation signature associated with some data. Only one of the signatures should be provided.",
            "properties" : {
               "multisig" : {
                  "$ref" : "#/components/schemas/TransactionSignatureMultisig"
               },
               "sig" : {
                  "type" : "string",
                  "description" : "\\[sig\\] Standard ed25519 signature.",
                  "format" : "byte",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
               },
               "logicsig" : {
                  "$ref" : "#/components/schemas/TransactionSignatureLogicsig"
               }
            }
         },
         "TransactionKeyreg" : {
            "properties" : {
               "vote-participation-key" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type" : "string",
                  "description" : "\\[votekey\\] Participation public key used in key registration transactions.",
                  "format" : "byte"
               },
               "selection-participation-key" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "description" : "\\[selkey\\] Public key used with the Verified Random Function (VRF) result during committee selection.",
                  "type" : "string",
                  "format" : "byte"
               },
               "vote-first-valid" : {
                  "type" : "integer",
                  "description" : "\\[votefst\\] First round this participation key is valid."
               },
               "vote-last-valid" : {
                  "description" : "\\[votelst\\] Last round this participation key is valid.",
                  "type" : "integer"
               },
               "non-participation" : {
                  "type" : "boolean",
                  "description" : "\\[nonpart\\] Mark the account as participating or non-participating."
               },
               "vote-key-dilution" : {
                  "type" : "integer",
                  "description" : "\\[votekd\\] Number of subkeys in each batch of participation keys."
               }
            },
            "type" : "object",
            "description" : "Fields for a keyreg transaction.\n\nDefinition:\ndata/transactions/keyreg.go : KeyregTxnFields"
         },
         "MiniAssetHolding" : {
            "type" : "object",
            "description" : "A simplified version of AssetHolding ",
            "required" : [
               "address",
               "amount",
               "is-frozen"
            ],
            "properties" : {
               "amount" : {
                  "x-algorand-format" : "uint64",
                  "type" : "integer"
               },
               "is-frozen" : {
                  "type" : "boolean"
               },
               "address" : {
                  "type" : "string"
               }
            }
         },
         "Block" : {
            "required" : [
               "genesis-hash",
               "genesis-id",
               "previous-block-hash",
               "round",
               "seed",
               "timestamp",
               "transactions-root"
            ],
            "properties" : {
               "timestamp" : {
                  "type" : "integer",
                  "description" : "\\[ts\\] Block creation timestamp in seconds since eposh"
               },
               "genesis-hash" : {
                  "format" : "byte",
                  "description" : "\\[gh\\] hash to which this block belongs.",
                  "type" : "string",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
               },
               "transactions" : {
                  "description" : "\\[txns\\] list of transactions corresponding to a given round.",
                  "items" : {
                     "$ref" : "#/components/schemas/Transaction"
                  },
                  "type" : "array"
               },
               "upgrade-vote" : {
                  "$ref" : "#/components/schemas/BlockUpgradeVote"
               },
               "transactions-root" : {
                  "format" : "byte",
                  "type" : "string",
                  "description" : "\\[txn\\] TransactionsRoot authenticates the set of transactions appearing in the block. More specifically, it's the root of a merkle tree whose leaves are the block's Txids, in lexicographic order. For the empty block, it's 0. Note that the TxnRoot does not authenticate the signatures on the transactions, only the transactions themselves. Two blocks with the same transactions but in a different order and with different signatures will have the same TxnRoot.",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
               },
               "upgrade-state" : {
                  "$ref" : "#/components/schemas/BlockUpgradeState"
               },
               "genesis-id" : {
                  "type" : "string",
                  "description" : "\\[gen\\] ID to which this block belongs."
               },
               "rewards" : {
                  "$ref" : "#/components/schemas/BlockRewards"
               },
               "round" : {
                  "description" : "\\[rnd\\] Current round on which this block was appended to the chain.",
                  "type" : "integer"
               },
               "previous-block-hash" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "format" : "byte",
                  "description" : "\\[prev\\] Previous block hash.",
                  "type" : "string"
               },
               "seed" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type" : "string",
                  "description" : "\\[seed\\] Sortition seed.",
                  "format" : "byte"
               },
               "txn-counter" : {
                  "type" : "integer",
                  "description" : "\\[tc\\] TxnCounter counts the number of transactions committed in the ledger, from the time at which support for this feature was introduced.\n\nSpecifically, TxnCounter is the number of the next transaction that will be committed after this block.  It is 0 when no transactions have ever been committed (since TxnCounter started being supported)."
               }
            },
            "description" : "Block information.\n\nDefinition:\ndata/bookkeeping/block.go : Block",
            "type" : "object"
         },
         "Asset" : {
            "description" : "Specifies both the unique identifier and the parameters for an asset",
            "type" : "object",
            "required" : [
               "index",
               "params"
            ],
            "properties" : {
               "index" : {
                  "type" : "integer",
                  "description" : "unique asset identifier"
               },
               "params" : {
                  "$ref" : "#/components/schemas/AssetParams"
               }
            }
         },
         "TransactionAssetConfig" : {
            "properties" : {
               "params" : {
                  "$ref" : "#/components/schemas/AssetParams"
               },
               "asset-id" : {
                  "type" : "integer",
                  "description" : "\\[xaid\\] ID of the asset being configured or empty if creating."
               }
            },
            "type" : "object",
            "description" : "Fields for asset allocation, re-configuration, and destruction.\n\n\nA zero value for asset-id indicates asset creation.\nA zero value for the params indicates asset destruction.\n\nDefinition:\ndata/transactions/asset.go : AssetConfigTxnFields"
         },
         "Account" : {
            "type" : "object",
            "description" : "Account information at a given round.\n\nDefinition:\ndata/basics/userBalance.go : AccountData\n",
            "required" : [
               "address",
               "amount",
               "amount-without-pending-rewards",
               "pending-rewards",
               "rewards",
               "round",
               "status"
            ],
            "properties" : {
               "amount-without-pending-rewards" : {
                  "type" : "integer",
                  "description" : "specifies the amount of MicroAlgos in the account, without the pending rewards."
               },
               "created-assets" : {
                  "type" : "array",
                  "items" : {
                     "$ref" : "#/components/schemas/Asset"
                  },
                  "description" : "\\[apar\\] parameters of assets created by this account.\n\nNote: the raw account uses `map[int] -> Asset` for this type."
               },
               "address" : {
                  "description" : "the account public key",
                  "type" : "string"
               },
               "pending-rewards" : {
                  "type" : "integer",
                  "description" : "amount of MicroAlgos of pending rewards in this account."
               },
               "amount" : {
                  "type" : "integer",
                  "description" : "\\[algo\\] total number of MicroAlgos in the account"
               },
               "status" : {
                  "type" : "string",
                  "description" : "\\[onl\\] delegation status of the account's MicroAlgos\n* Offline - indicates that the associated account is delegated.\n*  Online  - indicates that the associated account used as part of the delegation pool.\n*   NotParticipating - indicates that the associated account is neither a delegator nor a delegate."
               },
               "participation" : {
                  "$ref" : "#/components/schemas/AccountParticipation"
               },
               "reward-base" : {
                  "description" : "\\[ebase\\] used as part of the rewards computation. Only applicable to accounts which are participating.",
                  "type" : "integer"
               },
               "rewards" : {
                  "description" : "\\[ern\\] total rewards of MicroAlgos the account has received, including pending rewards.",
                  "type" : "integer"
               },
               "round" : {
                  "type" : "integer",
                  "description" : "The round for which this information is relevant."
               },
               "sig-type" : {
                  "description" : "Indicates what type of signature is used by this account, must be one of:\n* sig\n* msig\n* lsig",
                  "type" : "string",
                  "enum" : [
                     "sig",
                     "msig",
                     "lsig"
                  ]
               },
               "assets" : {
                  "description" : "\\[asset\\] assets held by this account.\n\nNote the raw object uses `map[int] -> AssetHolding` for this type.",
                  "items" : {
                     "$ref" : "#/components/schemas/AssetHolding"
                  },
                  "type" : "array"
               }
            }
         },
         "ErrorResponse" : {
            "type" : "object",
            "description" : "An error response with optional data field.",
            "required" : [
               "message"
            ],
            "properties" : {
               "message" : {
                  "type" : "string"
               },
               "data" : {
                  "type" : "string"
               }
            }
         },
         "Transaction" : {
            "properties" : {
               "signature" : {
                  "$ref" : "#/components/schemas/TransactionSignature"
               },
               "genesis-id" : {
                  "type" : "string",
                  "description" : "\\[gen\\] genesis block ID."
               },
               "created-asset-index" : {
                  "description" : "Specifies an asset index (ID) if an asset was created with this transaction.",
                  "type" : "integer"
               },
               "first-valid" : {
                  "type" : "integer",
                  "description" : "\\[fv\\] First valid round for this transaction."
               },
               "tx-type" : {
                  "description" : "\\[type\\] Indicates what type of transaction this is. Different types have different fields.\n\nValid types, and where their fields are stored:\n* \\[pay\\] payment-transaction\n* \\[keyreg\\] keyreg-transaction\n* \\[acfg\\] asset-config-transaction\n* \\[axfer\\] asset-transfer-transaction\n* \\[afrz\\] asset-freeze-transaction",
                  "type" : "string",
                  "x-algorand-format" : "tx-type-enum",
                  "enum" : [
                     "pay",
                     "keyreg",
                     "acfg",
                     "axfer",
                     "afrz"
                  ]
               },
               "genesis-hash" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "description" : "\\[gh\\] Hash of genesis block.",
                  "type" : "string",
                  "format" : "byte"
               },
               "id" : {
                  "type" : "string",
                  "description" : "Transaction ID"
               },
               "confirmed-round" : {
                  "description" : "Round when the transaction was confirmed.",
                  "type" : "integer"
               },
               "payment-transaction" : {
                  "$ref" : "#/components/schemas/TransactionPayment"
               },
               "keyreg-transaction" : {
                  "$ref" : "#/components/schemas/TransactionKeyreg"
               },
               "lease" : {
                  "format" : "byte",
                  "description" : "\\[lx\\] Base64 encoded 32-byte array. Lease enforces mutual exclusion of transactions.  If this field is nonzero, then once the transaction is confirmed, it acquires the lease identified by the (Sender, Lease) pair of the transaction until the LastValid round passes.  While this transaction possesses the lease, no other transaction specifying this lease can be confirmed.",
                  "type" : "string",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
               },
               "note" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "format" : "byte",
                  "description" : "\\[note\\] Free form data.",
                  "type" : "string"
               },
               "round-time" : {
                  "description" : "Time when the block this transaction is in was confirmed.",
                  "type" : "integer"
               },
               "sender-rewards" : {
                  "description" : "\\[rs\\] rewards applied to sender account.",
                  "type" : "integer"
               },
               "last-valid" : {
                  "description" : "\\[lv\\] Last valid round for this transaction.",
                  "type" : "integer"
               },
               "closing-amount" : {
                  "type" : "integer",
                  "description" : "\\[ca\\] closing amount for transaction."
               },
               "asset-freeze-transaction" : {
                  "$ref" : "#/components/schemas/TransactionAssetFreeze"
               },
               "intra-round-offset" : {
                  "type" : "integer",
                  "description" : "Offset into the round where this transaction was confirmed."
               },
               "fee" : {
                  "type" : "integer",
                  "description" : "\\[fee\\] Transaction fee."
               },
               "sender" : {
                  "description" : "\\[snd\\] Sender's address.",
                  "type" : "string"
               },
               "group" : {
                  "format" : "byte",
                  "description" : "\\[grp\\] Base64 encoded byte array of a sha512/256 digest. When present indicates that this transaction is part of a transaction group and the value is the sha512/256 hash of the transactions in that group.",
                  "type" : "string",
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
               },
               "receiver-rewards" : {
                  "description" : "\\[rr\\] rewards applied to receiver account.",
                  "type" : "integer"
               },
               "asset-transfer-transaction" : {
                  "$ref" : "#/components/schemas/TransactionAssetTransfer"
               },
               "close-rewards" : {
                  "type" : "integer",
                  "description" : "\\[rc\\] rewards applied to close-remainder-to account."
               },
               "asset-config-transaction" : {
                  "$ref" : "#/components/schemas/TransactionAssetConfig"
               }
            },
            "required" : [
               "fee",
               "first-valid",
               "id",
               "last-valid",
               "sender",
               "signature",
               "tx-type"
            ],
            "description" : "Contains all fields common to all transactions and serves as an envelope to all transactions type.\n\nDefinition:\ndata/transactions/signedtxn.go : SignedTxn\ndata/transactions/transaction.go : Transaction\n",
            "type" : "object"
         },
         "TransactionSignatureLogicsig" : {
            "properties" : {
               "signature" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type" : "string",
                  "description" : "\\[sig\\] ed25519 signature.",
                  "format" : "byte"
               },
               "multisig-signature" : {
                  "$ref" : "#/components/schemas/TransactionSignatureMultisig"
               },
               "args" : {
                  "description" : "\\[arg\\] Logic arguments, base64 encoded.",
                  "type" : "array",
                  "items" : {
                     "type" : "string"
                  }
               },
               "logic" : {
                  "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "format" : "byte",
                  "description" : "\\[l\\] Program signed by a signature or multi signature, or hashed to be the address of ana ccount. Base64 encoded TEAL program.",
                  "type" : "string"
               }
            },
            "required" : [
               "logic"
            ],
            "type" : "object",
            "description" : "\\[lsig\\] Programatic transaction signature.\n\nDefinition:\ndata/transactions/logicsig.go"
         },
         "AssetHolding" : {
            "type" : "object",
            "description" : "Describes an asset held by an account.\n\nDefinition:\ndata/basics/userBalance.go : AssetHolding",
            "properties" : {
               "amount" : {
                  "x-algorand-format" : "uint64",
                  "type" : "integer",
                  "description" : "\\[a\\] number of units held."
               },
               "is-frozen" : {
                  "type" : "boolean",
                  "description" : "\\[f\\] whether or not the holding is frozen."
               },
               "creator" : {
                  "type" : "string",
                  "description" : "Address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case."
               },
               "asset-id" : {
                  "type" : "integer",
                  "description" : "Asset ID of the holding.",
                  "x-go-name" : "AssetID"
               }
            },
            "required" : [
               "amount",
               "asset-id",
               "creator",
               "is-frozen"
            ]
         },
         "TransactionSignatureMultisig" : {
            "description" : "\\[msig\\] structure holding multiple subsignatures.\n\nDefinition:\ncrypto/multisig.go : MultisigSig",
            "type" : "object",
            "properties" : {
               "subsignature" : {
                  "description" : "\\[subsig\\] holds pairs of public key and signatures.",
                  "items" : {
                     "$ref" : "#/components/schemas/TransactionSignatureMultisigSubsignature"
                  },
                  "type" : "array"
               },
               "version" : {
                  "type" : "integer",
                  "description" : "\\[v\\]"
               },
               "threshold" : {
                  "type" : "integer",
                  "description" : "\\[thr\\]"
               }
            }
         }
      },
      "parameters" : {
         "next" : {
            "description" : "The next page of results. Use the next token provided by the previous results.",
            "in" : "query",
            "schema" : {
               "type" : "string"
            },
            "name" : "next"
         },
         "before-time" : {
            "description" : "Include results before the given time. Must be an RFC 3339 formatted string.",
            "x-algorand-format" : "RFC3339 String",
            "name" : "before-time",
            "schema" : {
               "type" : "string",
               "format" : "date-time",
               "x-algorand-format" : "RFC3339 String"
            },
            "in" : "query"
         },
         "address" : {
            "name" : "address",
            "schema" : {
               "x-algorand-format" : "Address",
               "type" : "string"
            },
            "in" : "query",
            "description" : "Only include transactions with this address in one of the transaction fields.",
            "x-algorand-format" : "Address"
         },
         "sig-type" : {
            "description" : "SigType filters just results using the specified type of signature:\n* sig - Standard\n* msig - MultiSig\n* lsig - LogicSig",
            "in" : "query",
            "name" : "sig-type",
            "schema" : {
               "enum" : [
                  "sig",
                  "msig",
                  "lsig"
               ],
               "type" : "string"
            }
         },
         "round-number" : {
            "description" : "Round number",
            "required" : true,
            "schema" : {
               "type" : "integer"
            },
            "name" : "round-number",
            "in" : "path"
         },
         "note-prefix" : {
            "in" : "query",
            "schema" : {
               "type" : "string"
            },
            "name" : "note-prefix",
            "description" : "Specifies a prefix which must be contained in the note field."
         },
         "limit" : {
            "description" : "Maximum number of results to return.",
            "in" : "query",
            "schema" : {
               "type" : "integer"
            },
            "name" : "limit"
         },
         "tx-type" : {
            "in" : "query",
            "schema" : {
               "type" : "string",
               "enum" : [
                  "pay",
                  "keyreg",
                  "acfg",
                  "axfer",
                  "afrz"
               ]
            },
            "name" : "tx-type"
         },
         "currency-greater-than" : {
            "description" : "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
            "schema" : {
               "type" : "integer"
            },
            "name" : "currency-greater-than",
            "in" : "query"
         },
         "max-round" : {
            "schema" : {
               "type" : "integer"
            },
            "name" : "max-round",
            "in" : "query",
            "description" : "Include results at or before the specified max-round."
         },
         "currency-less-than" : {
            "description" : "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
            "name" : "currency-less-than",
            "schema" : {
               "type" : "integer"
            },
            "in" : "query"
         },
         "asset-id" : {
            "description" : "Asset ID",
            "x-go-name" : "AssetID",
            "in" : "query",
            "name" : "asset-id",
            "schema" : {
               "type" : "integer",
               "x-go-name" : "AssetID"
            }
         },
         "min-round" : {
            "description" : "Include results at or after the specified min-round.",
            "schema" : {
               "type" : "integer"
            },
            "name" : "min-round",
            "in" : "query"
         },
         "txid" : {
            "schema" : {
               "type" : "string",
               "x-go-name" : "TxID"
            },
            "name" : "txid",
            "in" : "query",
            "x-go-name" : "TxID",
            "description" : "Lookup the specific transaction by ID."
         },
         "account-id" : {
            "required" : true,
            "description" : "account string",
            "x-go-name" : "AccountID",
            "in" : "path",
            "schema" : {
               "x-go-name" : "AccountID",
               "type" : "string"
            },
            "name" : "account-id"
         },
         "address-role" : {
            "description" : "Combine with the address parameter to define what type of address to search for.",
            "in" : "query",
            "name" : "address-role",
            "schema" : {
               "enum" : [
                  "sender",
                  "receiver",
                  "freeze-target"
               ],
               "type" : "string"
            }
         },
         "exclude-close-to" : {
            "name" : "exclude-close-to",
            "schema" : {
               "type" : "boolean"
            },
            "in" : "query",
            "description" : "Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true."
         },
         "after-time" : {
            "name" : "after-time",
            "schema" : {
               "x-algorand-format" : "RFC3339 String",
               "format" : "date-time",
               "type" : "string"
            },
            "in" : "query",
            "description" : "Include results after the given time. Must be an RFC 3339 formatted string.",
            "x-algorand-format" : "RFC3339 String"
         },
         "round" : {
            "in" : "query",
            "name" : "round",
            "schema" : {
               "type" : "integer"
            },
            "description" : "Include results for the specified round."
         }
      },
      "responses" : {
         "AssetBalancesResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "type" : "object",
                     "properties" : {
                        "next-token" : {
                           "type" : "string",
                           "description" : "Used for pagination, when making another request provide this token with the next parameter."
                        },
                        "current-round" : {
                           "description" : "Round at which the results were computed.",
                           "type" : "integer"
                        },
                        "balances" : {
                           "type" : "array",
                           "items" : {
                              "$ref" : "#/components/schemas/MiniAssetHolding"
                           }
                        }
                     },
                     "required" : [
                        "balances",
                        "current-round"
                     ]
                  }
               }
            },
            "description" : "(empty)"
         },
         "AccountsResponse" : {
            "description" : "(empty)",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "properties" : {
                        "current-round" : {
                           "type" : "integer",
                           "description" : "Round at which the results were computed."
                        },
                        "next-token" : {
                           "type" : "string",
                           "description" : "Used for pagination, when making another request provide this token with the next parameter."
                        },
                        "accounts" : {
                           "type" : "array",
                           "items" : {
                              "$ref" : "#/components/schemas/Account"
                           }
                        }
                     },
                     "required" : [
                        "accounts",
                        "current-round"
                     ],
                     "type" : "object"
                  }
               }
            }
         },
         "BlockResponse" : {
            "description" : "(empty)",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "$ref" : "#/components/schemas/Block"
                  }
               }
            }
         },
         "TransactionsResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "type" : "object",
                     "properties" : {
                        "transactions" : {
                           "type" : "array",
                           "items" : {
                              "$ref" : "#/components/schemas/Transaction"
                           }
                        },
                        "next-token" : {
                           "description" : "Used for pagination, when making another request provide this token with the next parameter.",
                           "type" : "string"
                        },
                        "current-round" : {
                           "type" : "integer",
                           "description" : "Round at which the results were computed."
                        }
                     },
                     "required" : [
                        "current-round",
                        "transactions"
                     ]
                  }
               }
            },
            "description" : "(empty)"
         },
         "AssetsResponse" : {
            "description" : "(empty)",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "required" : [
                        "assets",
                        "current-round"
                     ],
                     "properties" : {
                        "assets" : {
                           "items" : {
                              "$ref" : "#/components/schemas/Asset"
                           },
                           "type" : "array"
                        },
                        "current-round" : {
                           "type" : "integer",
                           "description" : "Round at which the results were computed."
                        },
                        "next-token" : {
                           "type" : "string",
                           "description" : "Used for pagination, when making another request provide this token with the next parameter."
                        }
                     },
                     "type" : "object"
                  }
               }
            }
         },
         "AssetResponse" : {
            "description" : "(empty)",
            "content" : {
               "application/json" : {
                  "schema" : {
                     "type" : "object",
                     "required" : [
                        "asset",
                        "current-round"
                     ],
                     "properties" : {
                        "asset" : {
                           "$ref" : "#/components/schemas/Asset"
                        },
                        "current-round" : {
                           "type" : "integer",
                           "description" : "Round at which the results were computed."
                        }
                     }
                  }
               }
            }
         },
         "AccountResponse" : {
            "content" : {
               "application/json" : {
                  "schema" : {
                     "properties" : {
                        "current-round" : {
                           "type" : "integer",
                           "description" : "Round at which the results were computed."
                        },
                        "account" : {
                           "$ref" : "#/components/schemas/Account"
                        }
                     },
                     "required" : [
                        "account",
                        "current-round"
                     ],
                     "type" : "object"
                  }
               }
            },
            "description" : "(empty)"
         }
      }
   },
   "servers" : [
      {
         "url" : "https://example.com/v1"
      }
   ],
   "tags" : [
      {
         "name" : "lookup"
      },
      {
         "name" : "search"
      }
   ],
   "paths" : {
      "/assets" : {
         "get" : {
            "parameters" : [
               {
                  "in" : "query",
                  "name" : "limit",
                  "schema" : {
                     "type" : "integer"
                  },
                  "description" : "Maximum number of results to return."
               },
               {
                  "description" : "The next page of results. Use the next token provided by the previous results.",
                  "schema" : {
                     "type" : "string"
                  },
                  "name" : "next",
                  "in" : "query"
               },
               {
                  "schema" : {
                     "type" : "string"
                  },
                  "name" : "creator",
                  "in" : "query",
                  "description" : "Filter just assets with the given creator address."
               },
               {
                  "description" : "Filter just assets with the given name.",
                  "in" : "query",
                  "schema" : {
                     "type" : "string"
                  },
                  "name" : "name"
               },
               {
                  "schema" : {
                     "type" : "string"
                  },
                  "name" : "unit",
                  "in" : "query",
                  "description" : "Filter just assets with the given unit."
               },
               {
                  "in" : "query",
                  "x-go-name" : "AssetID",
                  "schema" : {
                     "x-go-name" : "AssetID",
                     "type" : "integer"
                  },
                  "name" : "asset-id",
                  "description" : "Asset ID"
               }
            ],
            "tags" : [
               "search"
            ],
            "description" : "Search for assets.",
            "responses" : {
               "200" : {
                  "description" : "(empty)",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "required" : [
                              "assets",
                              "current-round"
                           ],
                           "properties" : {
                              "next-token" : {
                                 "description" : "Used for pagination, when making another request provide this token with the next parameter.",
                                 "type" : "string"
                              },
                              "current-round" : {
                                 "description" : "Round at which the results were computed.",
                                 "type" : "integer"
                              },
                              "assets" : {
                                 "type" : "array",
                                 "items" : {
                                    "$ref" : "#/components/schemas/Asset"
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "operationId" : "searchForAssets"
         }
      },
      "/accounts/{account-id}" : {
         "get" : {
            "operationId" : "lookupAccountByID",
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "required" : [
                              "account",
                              "current-round"
                           ],
                           "properties" : {
                              "current-round" : {
                                 "type" : "integer",
                                 "description" : "Round at which the results were computed."
                              },
                              "account" : {
                                 "$ref" : "#/components/schemas/Account"
                              }
                           },
                           "type" : "object"
                        }
                     }
                  },
                  "description" : "(empty)"
               }
            },
            "description" : "Lookup account information.",
            "tags" : [
               "lookup"
            ],
            "parameters" : [
               {
                  "description" : "account string",
                  "required" : true,
                  "schema" : {
                     "type" : "string",
                     "x-go-name" : "AccountID"
                  },
                  "name" : "account-id",
                  "in" : "path",
                  "x-go-name" : "AccountID"
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "round",
                  "description" : "Include results for the specified round."
               }
            ]
         }
      },
      "/transactions" : {
         "get" : {
            "description" : "Search for transactions.",
            "tags" : [
               "search"
            ],
            "parameters" : [
               {
                  "description" : "Maximum number of results to return.",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "limit",
                  "in" : "query"
               },
               {
                  "description" : "The next page of results. Use the next token provided by the previous results.",
                  "in" : "query",
                  "name" : "next",
                  "schema" : {
                     "type" : "string"
                  }
               },
               {
                  "name" : "note-prefix",
                  "schema" : {
                     "type" : "string"
                  },
                  "in" : "query",
                  "description" : "Specifies a prefix which must be contained in the note field."
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "pay",
                        "keyreg",
                        "acfg",
                        "axfer",
                        "afrz"
                     ]
                  },
                  "name" : "tx-type"
               },
               {
                  "in" : "query",
                  "schema" : {
                     "enum" : [
                        "sig",
                        "msig",
                        "lsig"
                     ],
                     "type" : "string"
                  },
                  "name" : "sig-type",
                  "description" : "SigType filters just results using the specified type of signature:\n* sig - Standard\n* msig - MultiSig\n* lsig - LogicSig"
               },
               {
                  "description" : "Lookup the specific transaction by ID.",
                  "in" : "query",
                  "x-go-name" : "TxID",
                  "name" : "txid",
                  "schema" : {
                     "x-go-name" : "TxID",
                     "type" : "string"
                  }
               },
               {
                  "name" : "round",
                  "schema" : {
                     "type" : "integer"
                  },
                  "in" : "query",
                  "description" : "Include results for the specified round."
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "min-round",
                  "description" : "Include results at or after the specified min-round."
               },
               {
                  "description" : "Include results at or before the specified max-round.",
                  "in" : "query",
                  "name" : "max-round",
                  "schema" : {
                     "type" : "integer"
                  }
               },
               {
                  "in" : "query",
                  "x-go-name" : "AssetID",
                  "schema" : {
                     "type" : "integer",
                     "x-go-name" : "AssetID"
                  },
                  "name" : "asset-id",
                  "description" : "Asset ID"
               },
               {
                  "in" : "query",
                  "name" : "before-time",
                  "schema" : {
                     "type" : "string",
                     "x-algorand-format" : "RFC3339 String",
                     "format" : "date-time"
                  },
                  "x-algorand-format" : "RFC3339 String",
                  "description" : "Include results before the given time. Must be an RFC 3339 formatted string."
               },
               {
                  "description" : "Include results after the given time. Must be an RFC 3339 formatted string.",
                  "x-algorand-format" : "RFC3339 String",
                  "name" : "after-time",
                  "schema" : {
                     "x-algorand-format" : "RFC3339 String",
                     "format" : "date-time",
                     "type" : "string"
                  },
                  "in" : "query"
               },
               {
                  "description" : "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
                  "name" : "currency-greater-than",
                  "schema" : {
                     "type" : "integer"
                  },
                  "in" : "query"
               },
               {
                  "description" : "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
                  "in" : "query",
                  "name" : "currency-less-than",
                  "schema" : {
                     "type" : "integer"
                  }
               },
               {
                  "name" : "address",
                  "schema" : {
                     "x-algorand-format" : "Address",
                     "type" : "string"
                  },
                  "in" : "query",
                  "description" : "Only include transactions with this address in one of the transaction fields.",
                  "x-algorand-format" : "Address"
               },
               {
                  "description" : "Combine with the address parameter to define what type of address to search for.",
                  "in" : "query",
                  "name" : "address-role",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "sender",
                        "receiver",
                        "freeze-target"
                     ]
                  }
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "boolean"
                  },
                  "name" : "exclude-close-to",
                  "description" : "Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true."
               }
            ],
            "operationId" : "searchForTransactions",
            "responses" : {
               "200" : {
                  "description" : "(empty)",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "properties" : {
                              "current-round" : {
                                 "description" : "Round at which the results were computed.",
                                 "type" : "integer"
                              },
                              "next-token" : {
                                 "type" : "string",
                                 "description" : "Used for pagination, when making another request provide this token with the next parameter."
                              },
                              "transactions" : {
                                 "items" : {
                                    "$ref" : "#/components/schemas/Transaction"
                                 },
                                 "type" : "array"
                              }
                           },
                           "required" : [
                              "current-round",
                              "transactions"
                           ],
                           "type" : "object"
                        }
                     }
                  }
               },
               "500" : {
                  "description" : "error",
                  "content" : {}
               }
            }
         }
      },
      "/accounts" : {
         "get" : {
            "parameters" : [
               {
                  "in" : "query",
                  "x-go-name" : "AssetID",
                  "schema" : {
                     "x-go-name" : "AssetID",
                     "type" : "integer"
                  },
                  "name" : "asset-id",
                  "description" : "Asset ID"
               },
               {
                  "description" : "Maximum number of results to return.",
                  "name" : "limit",
                  "schema" : {
                     "type" : "integer"
                  },
                  "in" : "query"
               },
               {
                  "description" : "The next page of results. Use the next token provided by the previous results.",
                  "in" : "query",
                  "schema" : {
                     "type" : "string"
                  },
                  "name" : "next"
               },
               {
                  "description" : "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
                  "name" : "currency-greater-than",
                  "schema" : {
                     "type" : "integer"
                  },
                  "in" : "query"
               },
               {
                  "name" : "currency-less-than",
                  "schema" : {
                     "type" : "integer"
                  },
                  "in" : "query",
                  "description" : "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used."
               },
               {
                  "description" : "Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations.",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "round",
                  "in" : "query"
               }
            ],
            "tags" : [
               "search"
            ],
            "description" : "Search for accounts.",
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "required" : [
                              "accounts",
                              "current-round"
                           ],
                           "properties" : {
                              "current-round" : {
                                 "type" : "integer",
                                 "description" : "Round at which the results were computed."
                              },
                              "accounts" : {
                                 "type" : "array",
                                 "items" : {
                                    "$ref" : "#/components/schemas/Account"
                                 }
                              },
                              "next-token" : {
                                 "description" : "Used for pagination, when making another request provide this token with the next parameter.",
                                 "type" : "string"
                              }
                           },
                           "type" : "object"
                        }
                     }
                  },
                  "description" : "(empty)"
               }
            },
            "operationId" : "searchForAccounts"
         }
      },
      "/assets/{asset-id}/balances" : {
         "get" : {
            "responses" : {
               "200" : {
                  "description" : "(empty)",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "required" : [
                              "balances",
                              "current-round"
                           ],
                           "properties" : {
                              "balances" : {
                                 "items" : {
                                    "$ref" : "#/components/schemas/MiniAssetHolding"
                                 },
                                 "type" : "array"
                              },
                              "next-token" : {
                                 "type" : "string",
                                 "description" : "Used for pagination, when making another request provide this token with the next parameter."
                              },
                              "current-round" : {
                                 "description" : "Round at which the results were computed.",
                                 "type" : "integer"
                              }
                           }
                        }
                     }
                  }
               }
            },
            "operationId" : "lookupAssetBalances",
            "parameters" : [
               {
                  "name" : "limit",
                  "schema" : {
                     "type" : "integer"
                  },
                  "in" : "query",
                  "description" : "Maximum number of results to return."
               },
               {
                  "description" : "The next page of results. Use the next token provided by the previous results.",
                  "in" : "query",
                  "schema" : {
                     "type" : "string"
                  },
                  "name" : "next"
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "round",
                  "description" : "Include results for the specified round."
               },
               {
                  "description" : "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
                  "name" : "currency-greater-than",
                  "schema" : {
                     "type" : "integer"
                  },
                  "in" : "query"
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "currency-less-than",
                  "description" : "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used."
               },
               {
                  "required" : true,
                  "in" : "path",
                  "name" : "asset-id",
                  "schema" : {
                     "type" : "integer"
                  }
               }
            ],
            "description" : "Lookup the list of accounts who hold this asset ",
            "tags" : [
               "lookup"
            ]
         }
      },
      "/assets/{asset-id}/transactions" : {
         "get" : {
            "description" : "Lookup transactions for an asset.",
            "tags" : [
               "lookup"
            ],
            "parameters" : [
               {
                  "description" : "Maximum number of results to return.",
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "limit"
               },
               {
                  "in" : "query",
                  "name" : "next",
                  "schema" : {
                     "type" : "string"
                  },
                  "description" : "The next page of results. Use the next token provided by the previous results."
               },
               {
                  "in" : "query",
                  "name" : "note-prefix",
                  "schema" : {
                     "type" : "string"
                  },
                  "description" : "Specifies a prefix which must be contained in the note field."
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "pay",
                        "keyreg",
                        "acfg",
                        "axfer",
                        "afrz"
                     ]
                  },
                  "name" : "tx-type"
               },
               {
                  "description" : "SigType filters just results using the specified type of signature:\n* sig - Standard\n* msig - MultiSig\n* lsig - LogicSig",
                  "in" : "query",
                  "name" : "sig-type",
                  "schema" : {
                     "enum" : [
                        "sig",
                        "msig",
                        "lsig"
                     ],
                     "type" : "string"
                  }
               },
               {
                  "description" : "Lookup the specific transaction by ID.",
                  "in" : "query",
                  "x-go-name" : "TxID",
                  "schema" : {
                     "type" : "string",
                     "x-go-name" : "TxID"
                  },
                  "name" : "txid"
               },
               {
                  "name" : "round",
                  "schema" : {
                     "type" : "integer"
                  },
                  "in" : "query",
                  "description" : "Include results for the specified round."
               },
               {
                  "description" : "Include results at or after the specified min-round.",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "min-round",
                  "in" : "query"
               },
               {
                  "in" : "query",
                  "name" : "max-round",
                  "schema" : {
                     "type" : "integer"
                  },
                  "description" : "Include results at or before the specified max-round."
               },
               {
                  "x-algorand-format" : "RFC3339 String",
                  "description" : "Include results before the given time. Must be an RFC 3339 formatted string.",
                  "in" : "query",
                  "name" : "before-time",
                  "schema" : {
                     "type" : "string",
                     "format" : "date-time",
                     "x-algorand-format" : "RFC3339 String"
                  }
               },
               {
                  "in" : "query",
                  "schema" : {
                     "format" : "date-time",
                     "x-algorand-format" : "RFC3339 String",
                     "type" : "string"
                  },
                  "name" : "after-time",
                  "x-algorand-format" : "RFC3339 String",
                  "description" : "Include results after the given time. Must be an RFC 3339 formatted string."
               },
               {
                  "description" : "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
                  "in" : "query",
                  "name" : "currency-greater-than",
                  "schema" : {
                     "type" : "integer"
                  }
               },
               {
                  "description" : "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
                  "in" : "query",
                  "name" : "currency-less-than",
                  "schema" : {
                     "type" : "integer"
                  }
               },
               {
                  "in" : "query",
                  "schema" : {
                     "x-algorand-format" : "Address",
                     "type" : "string"
                  },
                  "name" : "address",
                  "x-algorand-format" : "Address",
                  "description" : "Only include transactions with this address in one of the transaction fields."
               },
               {
                  "description" : "Combine with the address parameter to define what type of address to search for.",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "sender",
                        "receiver",
                        "freeze-target"
                     ]
                  },
                  "name" : "address-role",
                  "in" : "query"
               },
               {
                  "in" : "query",
                  "name" : "exclude-close-to",
                  "schema" : {
                     "type" : "boolean"
                  },
                  "description" : "Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true."
               },
               {
                  "in" : "path",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "asset-id",
                  "required" : true
               }
            ],
            "operationId" : "lookupAssetTransactions",
            "responses" : {
               "200" : {
                  "description" : "(empty)",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "properties" : {
                              "next-token" : {
                                 "description" : "Used for pagination, when making another request provide this token with the next parameter.",
                                 "type" : "string"
                              },
                              "current-round" : {
                                 "description" : "Round at which the results were computed.",
                                 "type" : "integer"
                              },
                              "transactions" : {
                                 "type" : "array",
                                 "items" : {
                                    "$ref" : "#/components/schemas/Transaction"
                                 }
                              }
                           },
                           "required" : [
                              "current-round",
                              "transactions"
                           ],
                           "type" : "object"
                        }
                     }
                  }
               }
            }
         }
      },
      "/blocks/{round-number}" : {
         "get" : {
            "parameters" : [
               {
                  "in" : "path",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "round-number",
                  "required" : true,
                  "description" : "Round number"
               }
            ],
            "tags" : [
               "lookup"
            ],
            "description" : "Lookup block.",
            "responses" : {
               "200" : {
                  "description" : "(empty)",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/Block"
                        }
                     }
                  }
               }
            },
            "operationId" : "lookupBlock"
         }
      },
      "/accounts/{account-id}/transactions" : {
         "get" : {
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "required" : [
                              "current-round",
                              "transactions"
                           ],
                           "properties" : {
                              "transactions" : {
                                 "type" : "array",
                                 "items" : {
                                    "$ref" : "#/components/schemas/Transaction"
                                 }
                              },
                              "next-token" : {
                                 "type" : "string",
                                 "description" : "Used for pagination, when making another request provide this token with the next parameter."
                              },
                              "current-round" : {
                                 "type" : "integer",
                                 "description" : "Round at which the results were computed."
                              }
                           },
                           "type" : "object"
                        }
                     }
                  },
                  "description" : "(empty)"
               }
            },
            "operationId" : "lookupAccountTransactions",
            "parameters" : [
               {
                  "description" : "Maximum number of results to return.",
                  "in" : "query",
                  "name" : "limit",
                  "schema" : {
                     "type" : "integer"
                  }
               },
               {
                  "schema" : {
                     "type" : "string"
                  },
                  "name" : "next",
                  "in" : "query",
                  "description" : "The next page of results. Use the next token provided by the previous results."
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "string"
                  },
                  "name" : "note-prefix",
                  "description" : "Specifies a prefix which must be contained in the note field."
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "pay",
                        "keyreg",
                        "acfg",
                        "axfer",
                        "afrz"
                     ]
                  },
                  "name" : "tx-type"
               },
               {
                  "description" : "SigType filters just results using the specified type of signature:\n* sig - Standard\n* msig - MultiSig\n* lsig - LogicSig",
                  "schema" : {
                     "type" : "string",
                     "enum" : [
                        "sig",
                        "msig",
                        "lsig"
                     ]
                  },
                  "name" : "sig-type",
                  "in" : "query"
               },
               {
                  "schema" : {
                     "type" : "string",
                     "x-go-name" : "TxID"
                  },
                  "name" : "txid",
                  "in" : "query",
                  "x-go-name" : "TxID",
                  "description" : "Lookup the specific transaction by ID."
               },
               {
                  "in" : "query",
                  "name" : "round",
                  "schema" : {
                     "type" : "integer"
                  },
                  "description" : "Include results for the specified round."
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "min-round",
                  "description" : "Include results at or after the specified min-round."
               },
               {
                  "description" : "Include results at or before the specified max-round.",
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "max-round"
               },
               {
                  "description" : "Asset ID",
                  "name" : "asset-id",
                  "schema" : {
                     "type" : "integer",
                     "x-go-name" : "AssetID"
                  },
                  "in" : "query",
                  "x-go-name" : "AssetID"
               },
               {
                  "in" : "query",
                  "name" : "before-time",
                  "schema" : {
                     "format" : "date-time",
                     "x-algorand-format" : "RFC3339 String",
                     "type" : "string"
                  },
                  "x-algorand-format" : "RFC3339 String",
                  "description" : "Include results before the given time. Must be an RFC 3339 formatted string."
               },
               {
                  "schema" : {
                     "type" : "string",
                     "x-algorand-format" : "RFC3339 String",
                     "format" : "date-time"
                  },
                  "name" : "after-time",
                  "in" : "query",
                  "description" : "Include results after the given time. Must be an RFC 3339 formatted string.",
                  "x-algorand-format" : "RFC3339 String"
               },
               {
                  "description" : "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
                  "in" : "query",
                  "name" : "currency-greater-than",
                  "schema" : {
                     "type" : "integer"
                  }
               },
               {
                  "in" : "query",
                  "schema" : {
                     "type" : "integer"
                  },
                  "name" : "currency-less-than",
                  "description" : "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used."
               },
               {
                  "name" : "account-id",
                  "schema" : {
                     "x-go-name" : "AccountID",
                     "type" : "string"
                  },
                  "in" : "path",
                  "x-go-name" : "AccountID",
                  "description" : "account string",
                  "required" : true
               }
            ],
            "description" : "Lookup account transactions.",
            "tags" : [
               "lookup"
            ]
         }
      },
      "/assets/{asset-id}" : {
         "get" : {
            "tags" : [
               "lookup"
            ],
            "description" : "Lookup asset information.",
            "parameters" : [
               {
                  "name" : "asset-id",
                  "schema" : {
                     "type" : "integer"
                  },
                  "in" : "path",
                  "required" : true
               }
            ],
            "operationId" : "lookupAssetByID",
            "responses" : {
               "200" : {
                  "description" : "(empty)",
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "type" : "object",
                           "required" : [
                              "asset",
                              "current-round"
                           ],
                           "properties" : {
                              "asset" : {
                                 "$ref" : "#/components/schemas/Asset"
                              },
                              "current-round" : {
                                 "type" : "integer",
                                 "description" : "Round at which the results were computed."
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   },
   "openapi" : "3.0.1"
}
