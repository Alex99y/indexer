// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//kZxsUDqEAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
