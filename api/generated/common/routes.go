// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oT9/t7j7cPe/AQAA///LytDSunYAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
