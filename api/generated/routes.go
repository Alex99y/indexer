// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
