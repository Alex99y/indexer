// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "after-address" -------------
	if paramValue := ctx.QueryParam("after-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-address", ctx.QueryParams(), &params.AfterAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "after-address" -------------
	if paramValue := ctx.QueryParam("after-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-address", ctx.QueryParams(), &params.AfterAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-address: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "after-asset" -------------
	if paramValue := ctx.QueryParam("after-asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-asset", ctx.QueryParams(), &params.AfterAsset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after-address" -------------
	if paramValue := ctx.QueryParam("after-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-address", ctx.QueryParams(), &params.AfterAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-address: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "after-address" -------------
	if paramValue := ctx.QueryParam("after-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-address", ctx.QueryParams(), &params.AfterAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-address: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "after-address" -------------
	if paramValue := ctx.QueryParam("after-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-address", ctx.QueryParams(), &params.AfterAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-address: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BLppqAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
