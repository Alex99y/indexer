// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /account/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /account/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /asset/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /asset/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /asset/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /block/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /blocktimes)
	LookupBlockTimes(ctx echo.Context) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "max-ts" -------------
	if paramValue := ctx.QueryParam("max-ts"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-ts", ctx.QueryParams(), &params.MaxTs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-ts: %s", err))
	}

	// ------------- Optional query parameter "min-ts" -------------
	if paramValue := ctx.QueryParam("min-ts"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-ts", ctx.QueryParams(), &params.MinTs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-ts: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "gt" -------------
	if paramValue := ctx.QueryParam("gt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "gt", ctx.QueryParams(), &params.Gt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gt: %s", err))
	}

	// ------------- Optional query parameter "lt" -------------
	if paramValue := ctx.QueryParam("lt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "lt", ctx.QueryParams(), &params.Lt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lt: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "assetParams" -------------
	if paramValue := ctx.QueryParam("assetParams"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "assetParams", ctx.QueryParams(), &params.AssetParams)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetParams: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "gt" -------------
	if paramValue := ctx.QueryParam("gt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "gt", ctx.QueryParams(), &params.Gt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gt: %s", err))
	}

	// ------------- Optional query parameter "lt" -------------
	if paramValue := ctx.QueryParam("lt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "lt", ctx.QueryParams(), &params.Lt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lt: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "gt" -------------
	if paramValue := ctx.QueryParam("gt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "gt", ctx.QueryParams(), &params.Gt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gt: %s", err))
	}

	// ------------- Optional query parameter "lt" -------------
	if paramValue := ctx.QueryParam("lt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "lt", ctx.QueryParams(), &params.Lt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lt: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "min-ts" -------------
	if paramValue := ctx.QueryParam("min-ts"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-ts", ctx.QueryParams(), &params.MinTs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-ts: %s", err))
	}

	// ------------- Optional query parameter "max-ts" -------------
	if paramValue := ctx.QueryParam("max-ts"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-ts", ctx.QueryParams(), &params.MaxTs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-ts: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "gt" -------------
	if paramValue := ctx.QueryParam("gt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "gt", ctx.QueryParams(), &params.Gt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gt: %s", err))
	}

	// ------------- Optional query parameter "lt" -------------
	if paramValue := ctx.QueryParam("lt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "lt", ctx.QueryParams(), &params.Lt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lt: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "gt" -------------
	if paramValue := ctx.QueryParam("gt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "gt", ctx.QueryParams(), &params.Gt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gt: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// LookupBlockTimes converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlockTimes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlockTimes(ctx)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "noteprefix" -------------
	if paramValue := ctx.QueryParam("noteprefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "noteprefix", ctx.QueryParams(), &params.Noteprefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteprefix: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "sigtype" -------------
	if paramValue := ctx.QueryParam("sigtype"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sigtype", ctx.QueryParams(), &params.Sigtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sigtype: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "max-ts" -------------
	if paramValue := ctx.QueryParam("max-ts"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-ts", ctx.QueryParams(), &params.MaxTs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-ts: %s", err))
	}

	// ------------- Optional query parameter "min-ts" -------------
	if paramValue := ctx.QueryParam("min-ts"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-ts", ctx.QueryParams(), &params.MinTs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-ts: %s", err))
	}

	// ------------- Optional query parameter "gt" -------------
	if paramValue := ctx.QueryParam("gt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "gt", ctx.QueryParams(), &params.Gt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gt: %s", err))
	}

	// ------------- Optional query parameter "lt" -------------
	if paramValue := ctx.QueryParam("lt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "lt", ctx.QueryParams(), &params.Lt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lt: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/account/:account-id", wrapper.LookupAccountByID)
	router.GET("/account/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/asset/:asset-id", wrapper.LookupAssetByID)
	router.GET("/asset/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/asset/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/block/:round-number", wrapper.LookupBlock)
	router.GET("/blocktimes", wrapper.LookupBlockTimes)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"b2PjtgrGj4P94f2H/x8AAP//yf2lqS+fAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
