// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address-greater-than" -------------
	if paramValue := ctx.QueryParam("address-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-greater-than", ctx.QueryParams(), &params.AddressGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-greater-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "asset-greater-than" -------------
	if paramValue := ctx.QueryParam("asset-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-greater-than", ctx.QueryParams(), &params.AssetGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-greater-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "noteprefix" -------------
	if paramValue := ctx.QueryParam("noteprefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "noteprefix", ctx.QueryParams(), &params.Noteprefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteprefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
