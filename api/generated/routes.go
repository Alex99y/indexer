// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
