// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
