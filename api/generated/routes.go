// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
