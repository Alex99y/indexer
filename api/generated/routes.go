// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8+HmfwIAAP//gKxVW3euAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
