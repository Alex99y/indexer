// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "after-address" -------------
	if paramValue := ctx.QueryParam("after-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-address", ctx.QueryParams(), &params.AfterAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "after-asset" -------------
	if paramValue := ctx.QueryParam("after-asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-asset", ctx.QueryParams(), &params.AfterAsset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after-address" -------------
	if paramValue := ctx.QueryParam("after-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-address", ctx.QueryParams(), &params.AfterAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-address: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
