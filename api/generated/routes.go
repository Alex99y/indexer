// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address-greater-than" -------------
	if paramValue := ctx.QueryParam("address-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-greater-than", ctx.QueryParams(), &params.AddressGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-greater-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "asset-greater-than" -------------
	if paramValue := ctx.QueryParam("asset-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-greater-than", ctx.QueryParams(), &params.AssetGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-greater-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
