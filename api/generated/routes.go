// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
