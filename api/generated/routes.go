// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address-greater-than" -------------
	if paramValue := ctx.QueryParam("address-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-greater-than", ctx.QueryParams(), &params.AddressGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-greater-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "asset-greater-than" -------------
	if paramValue := ctx.QueryParam("asset-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-greater-than", ctx.QueryParams(), &params.AssetGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-greater-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "noteprefix" -------------
	if paramValue := ctx.QueryParam("noteprefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "noteprefix", ctx.QueryParams(), &params.Noteprefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noteprefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"STZ/CZgAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
