// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchAccounts(ctx echo.Context, params SearchAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
