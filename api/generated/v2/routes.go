// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"spending-key":          true,
		"round":                 true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "spending-key" -------------
	if paramValue := ctx.QueryParam("spending-key"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spending-key", ctx.QueryParams(), &params.SpendingKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spending-key: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"round": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"limit":    true,
		"next":     true,
		"creator":  true,
		"name":     true,
		"unit":     true,
		"asset-id": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
